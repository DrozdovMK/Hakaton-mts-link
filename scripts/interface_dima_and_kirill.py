# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'resalt_of_work.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5.QtWidgets import (
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QPushButton,
    QLabel,
    QListWidget
)
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import sys
from PyQt5 import QtWidgets #import QApplication, QWidget, QLabel, QVBoxLayout, QPushButton
import plotly.graph_objects as go
from plotly.offline import iplot
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import plotly.io as pio
import pyqtgraph as pg
from PyQt5 import QtCore, QtGui, QtWidgets

class BarChartApp(QWidget):
    def __init__(self, data, embeddings, answers, clusters,  suggestions):
        super().__init__()

        self.clusters = clusters
        self.embeddings = embeddings
        self.answers = answers
        self.data = data
        self.suggestions = suggestions
        self.data_plotly = data_plot
        self.radius_const = 10


        for i in self.data_plotly:
            self.data_plotly[i]["size"] = self.data_plotly[i]["size"]*self.radius_const
        self.initUI()

    def initUI(self):
        self.setWindowTitle("Облако слов")

        # Создаем фигуру и холст для графика
        self.figure = Figure()
        self.canvas = FigureCanvas(self.figure)

        # Создаем элементы интерфейса
        self.label = QLabel("Выберите категорию")
        self.listWidget = QListWidget()
        self.buttonLayout = QHBoxLayout()
        # self.button_plot = QPushButton("Построить график")

        # Создаем кнопки для каждой категории
        for key in self.data:
            button = QPushButton(key)
            button.clicked.connect(lambda checked, key=key: self.showSuggestions(key))
            self.buttonLayout.addWidget(button)
        
        # self.button_plot.clicked.connect(self.plot_graph)

        # Собираем все элементы в макет
        mainLayout = QVBoxLayout()
        # mainLayout.addWidget(self.canvas, 1)
        self.plot_widget = pg.PlotWidget()
        mainLayout.addWidget(self.plot_widget, 1)
        self.setLayout(mainLayout)
        mainLayout.addWidget(self.label)
        mainLayout.addWidget(self.listWidget, 1)
        mainLayout.addLayout(self.buttonLayout)
        mainLayout.addWidget(self.label)
        # mainLayout.addWidget(self.button_plot)
        
        # Рисуем график
        self.drawBarChart()
        self.create_data()
        self.draw_clusters()

    def draw_clusters(self):
        # Очищаем график перед перерисовкой
        self.plot_widget.clear()

        # Сохраняем объекты кругов для обработки событий
        self.circles = []

        for i, (center, size) in enumerate(zip(self.cluster_centers, self.cluster_sizes)):
            # Размер круга зависит от количества фраз в кластере
            radius = size * 0.05

            # Создаем круг
            circle = QtWidgets.QGraphicsEllipseItem(-radius, -radius, radius*2, radius*2)
            circle.setPen(pg.mkPen(color=(0, 0, 200), width=2))
            circle.setBrush(pg.mkBrush(100, 100, 250, 80))
            circle.setPos(center[0], center[1])
            circle.setData(1, self.cluster_summaries[i])

            # Добавляем круг на график
            self.plot_widget.addItem(circle)
            self.circles.append(circle)

            # Добавляем обобщающую фразу в центр круга
            text = pg.TextItem(f'Кластер {self.cluster_summaries[i]}', anchor=(0.5, 0.5), color=(0, 0, 0))
            text.setPos(center[0], center[1])
            text.setData(1, self.cluster_summaries[i])
            self.plot_widget.addItem(text)

        # Настраиваем событие клика мыши
        self.plot_widget.scene().sigMouseClicked.connect(self.on_click)



    def create_data(self):
        # Набор коротких фраз
        self.phrases = self.answers

        # Метки кластеров
        self.labels = self.clusters

        # Обобщающие фразы для каждого кластера
        indexes = np.unique(self.clusters, return_index=True)[1]
        self.cluster_summaries = [self.clusters[index] for index in sorted(indexes)]


        # Вычисляем центры и размеры кластеров
        self.cluster_centers = []
        self.cluster_sizes = []
        for i in range(len(self.cluster_summaries)):
            indices = np.where(self.labels == i)[0]
            center = np.mean(self.embeddings[indices], axis=0)
            size = len(indices)
            self.cluster_centers.append(center)
            self.cluster_sizes.append(size)


    def on_click(self, event):
        pos = event.scenePos()
        items = self.plot_widget.scene().items(pos)
        # Сортируем элементы по расстоянию до точки pos
        from PyQt5.QtCore import QPointF, QLineF
        items.sort(key=lambda item: QLineF(item.mapToScene(item.boundingRect().center()), pos).length())
        for item in items:
            cluster_index = item.data(1) 
            # print(cluster_index)
            if cluster_index is not None:
                self.showSuggestions(str(cluster_index))
                break

    
    def plot_graph(self):
        fig = go.Figure()

        for key, values in self.data_plotly.items():
            fig.add_trace(go.Scatter(
                x=[values["x"]],
                y=[values["y"]],
                mode='markers',
                marker=dict(
                    size=values["size"],
                    color='blue',
                    opacity=0.8
                ),
                text=values["text"],
                hovertemplate='<b>%{text}</b> \
                    X: %{x:.2f} \
                    Y: %{y:.2f} \
                    Size: %{marker.size:.2f}<extra></extra>'
            ))
        fig.update_layout(
            title="Интерактивный график",
            xaxis_title="X",
            yaxis_title="Y"
        )
        pio.write_image(fig, "plotly_figure.svg")
        self.canvas.draw()
        
        

    def drawBarChart(self):
        # Очищаем предыдущий график
        self.figure.clear()
        ax = self.figure.add_subplot(111)

        # Рисуем столбчатый график
        ax.bar(self.data.keys(), self.data.values())
        ax.set_xlabel("Категории")
        ax.set_ylabel("Значения")

        # Обновляем холст
        self.canvas.draw()

    def showSuggestions(self, category):
        # Очищаем список предложений
        self.listWidget.clear()

        # Заполняем список предложений
        for suggestion in self.suggestions[category]:
            self.listWidget.addItem(suggestion)



class Ui_TabWidget(object):
    def setupUi(self, TabWidget, data, embeddings, answers, clusters, suggestions):
        TabWidget.setObjectName("TabWidget")
        TabWidget.resize(0, 0)
        TabWidget.setStyleSheet("")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.tab)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(-1, -1, 1946, 53))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Copperplate")
        font.setPointSize(36)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.tab)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(-1, 40, 1671, 71))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Copperplate")
        font.setPointSize(24)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.tab)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(0, 180, 671, 80))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_3 = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("Copperplate")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_3.addWidget(self.label_3)
        self.gridLayoutWidget = QtWidgets.QWidget(self.tab)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(-1, 329, 681, 671))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.model_1_pushButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("free-icon-artificial-intelligence-4616790.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.model_1_pushButton.setIcon(icon)
        self.model_1_pushButton.setIconSize(QtCore.QSize(30, 30))
        self.model_1_pushButton.setObjectName("model_1_pushButton")
        self.gridLayout.addWidget(self.model_1_pushButton, 1, 0, 1, 1)
        self.model_1_description = QtWidgets.QLabel(self.gridLayoutWidget)
        self.model_1_description.setObjectName("model_1_description")
        self.gridLayout.addWidget(self.model_1_description, 0, 0, 1, 1)
        self.model_2_pushButton_2 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.model_2_pushButton_2.setIcon(icon)
        self.model_2_pushButton_2.setIconSize(QtCore.QSize(30, 30))
        self.model_2_pushButton_2.setObjectName("model_2_pushButton_2")
        self.gridLayout.addWidget(self.model_2_pushButton_2, 1, 1, 1, 1)
        self.model_2_description = QtWidgets.QLabel(self.gridLayoutWidget)
        self.model_2_description.setObjectName("model_2_description")
        self.gridLayout.addWidget(self.model_2_description, 0, 1, 1, 1)
        self.tableWidget = QtWidgets.QTableWidget(self.tab)
        self.tableWidget.setGeometry(QtCore.QRect(830, 320, 771, 491))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.tab)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(1020, 910, 411, 87))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setFamily("Copperplate")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_4.addWidget(self.label_4)
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        self.pushButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("free-icon-data-collection-7440330.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon1)
        self.pushButton.setIconSize(QtCore.QSize(40, 40))
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_4.addWidget(self.pushButton)
        self.verticalLayoutWidget_5 = QtWidgets.QWidget(self.tab)
        self.verticalLayoutWidget_5.setGeometry(QtCore.QRect(850, 170, 661, 80))
        self.verticalLayoutWidget_5.setObjectName("verticalLayoutWidget_5")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_5)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_5 = QtWidgets.QLabel(self.verticalLayoutWidget_5)
        font = QtGui.QFont()
        font.setFamily("Copperplate")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_5.addWidget(self.label_5)
        TabWidget.addTab(self.tab, "")
        
        # Вторая вкладка для диаграммы
        tab2 = QWidget()
        layout2 = QVBoxLayout()
        # Создаем экземпляр BarChartApp и добавляем его на вкладку
        self.bar_chart_app = BarChartApp(data, embeddings, answers, clusters, suggestions)  # Передайте данные здесь
        layout2.addWidget(self.bar_chart_app)
        tab2.setLayout(layout2)
        TabWidget.addTab(tab2, "Вкладка 2")

        # self.verticalLayoutWidget_7.setGeometry(QtCore.QRect(510, 920, 731, 80))
        # self.verticalLayoutWidget_7.setObjectName("verticalLayoutWidget_7")
        # self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_7)
        # self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        # self.verticalLayout_7.setObjectName("verticalLayout_7")
        # self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_7)
        # icon2 = QtGui.QIcon()
        # icon2.addPixmap(QtGui.QPixmap("free-icon-graph-2717703.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        # self.pushButton_2.setIcon(icon2)
        # self.pushButton_2.setIconSize(QtCore.QSize(40, 40))
        # self.pushButton_2.setObjectName("pushButton_2")
        # self.verticalLayout_7.addWidget(self.pushButton_2)
        # TabWidget.addTab(self.tab1, "")

        TabWidget.resize(0, 0) 

        self.retranslateUi(TabWidget)
        QtCore.QMetaObject.connectSlotsByName(TabWidget)

        # self.retranslateUi(TabWidget)
        # TabWidget.setCurrentIndex(0)
        # QtCore.QMetaObject.connectSlotsByName(TabWidget)

    def retranslateUi(self, TabWidget):
        _translate = QtCore.QCoreApplication.translate
        TabWidget.setWindowTitle(_translate("TabWidget", "TabWidget"))
        self.label.setText(_translate("TabWidget", "                                                     Анализ Текстовых Ответов"))
        self.label_2.setText(_translate("TabWidget", "                         Загружайте и анализируйте данные, чтобы получить информацию о мнениях, предпочтениях и мотивах"))
        self.label_3.setText(_translate("TabWidget", "                                  Выбор модели ( status: )"))
        self.model_1_pushButton.setText(_translate("TabWidget", "Загрузить модель"))
        self.model_1_description.setText(_translate("TabWidget", "                          Описани 1"))
        self.model_2_pushButton_2.setText(_translate("TabWidget", "Загрузить модель"))
        self.model_2_description.setText(_translate("TabWidget", "                             Описание 2"))
        self.label_4.setText(_translate("TabWidget", "     Получить данные из Google формы"))
        self.label_5.setText(_translate("TabWidget", "                                       Результаты опроса ( status: )"))
        TabWidget.setTabText(TabWidget.indexOf(self.tab), _translate("TabWidget", "Tab 1"))
        # self.label_6.setText(_translate("TabWidget", "                                             Статистика"))
        # self.pushButton_2.setText(_translate("TabWidget", "Отобразить графики"))
        # TabWidget.setTabText(TabWidget.indexOf(self.tab1), _translate("TabWidget", "Tab 2"))




# посичтали количесвто каждого числа в кластере
def count_numbers(numbers):
  counts = {}
  for number in numbers:
    if number in counts:
      counts[number.item()]["size"] += 1
    else:
      counts[number.item()] = {}
      counts[number.item()]["size"] = 1
  return counts

# заполнили для каждого кластера всевозможные координаты
def add_coordinats(data, clusters, embeddings):
    for i, embedding in enumerate(embeddings):
        if "xy" in data[clusters[i].item()]:
            data[clusters[i].item()]["xy"].append(embedding)
        else:
            data[clusters[i].item()]["xy"] = [embedding]

    return data

# для каждой координаты найдем центр
def center_of_coordinates(data):
    for clust in data:
       data[clust]["x"] = np.mean(np.array(data[clust]["xy"]), axis=0).tolist()[0]
       data[clust]["y"] = np.mean(np.array(data[clust]["xy"]), axis=0).tolist()[1]
       data[clust].pop("xy")

    return data

def add_text_value(data, clustesr, answers):
    for i, clust in enumerate(clusters):
        if "text" in data[clustesr[i].item()]:
            data[clustesr[i].item()]["text"].append(answers[i].item())
        else:
            data[clustesr[i].item()]["text"] = [answers[i].item()]
    return data

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    embeddings = np.load("dima/эмбеддинги2d.npy")
    print(embeddings)
    # print(f'embeddings: {embeddings}\n')
    clusters = np.load("dima/метки_кластеров.npy")
    # print(f'clusters: {clusters}\n')
    answers = np.load("dima/ответы_сотрудников.npy")
    # print(f'answers: {answers}\n')
    data_plot = count_numbers(clusters)
    data_plot = add_coordinats(data_plot, clusters, embeddings)
    data_plot = center_of_coordinates(data_plot)
    data_plot = add_text_value(data_plot, clusters, answers)
    data = {}
    suggestions = {}

    for i in data_plot:
        suggestions[str(i)] = data_plot[i]["text"]
        data[str(i)] = data_plot[i]["size"]
    TabWidget = QtWidgets.QTabWidget()
    ui = Ui_TabWidget()
    ui.setupUi(TabWidget,  data, embeddings, answers, clusters,  suggestions)
    TabWidget.show()
    sys.exit(app.exec_())
